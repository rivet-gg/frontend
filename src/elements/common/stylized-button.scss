@use '../shared/common';
@use '../shared/consts';
@use '../shared/utils';

:host {
	display: block;
	width: max-content; // Fit the content
}

::slotted(rvt-spinner) {
	fill: var(--icon-color, var(--color));
	width: var(--icon-size, 1em);
	height: var(--icon-size, 1em);
	margin-right: 0.5em;
}

@mixin stylized-button($height, $padding, $icon-margin, $font-size) {
	$color: var(--color);
	$icon-color: var(--icon-color, var(--color));

	box-sizing: border-box;
	position: relative;
	min-height: $height;
	min-width: $height;

	display: flex;
	flex-direction: row;
	justify-content: var(--justify-content, center);
	align-items: center;

	text-align: var(--text-align, center);
	text-transform: var(--text-transform, none);
	text-decoration: none;

	// Custom styles
	font-size: var(--font-size, $font-size);
	font-family: var(--font-family, consts.$open-sans);
	font-weight: var(--font-weight, 700);
	padding: var(--padding, $padding);
	border: var(--border, none);

	white-space: nowrap;
	letter-spacing: var(--letter-spacing);

	opacity: 1;
	background-color: var(--bg-color, #{$main-accent});
	color: $color;
	border-radius: 5px;

	cursor: pointer;
	overflow: hidden;
	transition:
		color consts.$transition-length,
		background-color consts.$transition-length,
		transform consts.$transition-length,
		box-shadow consts.$transition-length;

	e-svg {
		--fill: #{$icon-color};
		transform: var(--icon-transform);
		width: var(--icon-size, 1em);
		height: var(--icon-size, 1em);
	}

	#icon {
		margin: var(--icon-margin, 0 $icon-margin 0 0);
	}

	#right-icon {
		margin: var(--right-icon-margin, 0 0 0 4px);
	}

	// Shadow
	box-shadow: var(--box-shadow, none);

	// Alignment
	&.align-left {
		justify-content: left;
		text-align: left;
	}

	&.align-right {
		justify-content: left;
		text-align: left;
	}

	// Hover raise
	&:hover {
		transform: translateY(-1px);
	}

	// Lighten overlay
	&:after {
		content: '';

		position: absolute;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		transition: background-color consts.$transition-length;

		pointer-events: none;
	}

	&:hover:after {
		background-color: rgba(255, 255, 255, 0.05);
	}

	&:active:after {
		background-color: rgba(0, 0, 0, 0.1);
		transition: none; // Disable transition for click state
	}

	// Hover color change
	&:hover,
	&.active {
		background-color: var(--active-bg, var(--bg-color, #{$main-accent}));
		color: var(--active-color, var(--color));

		e-svg {
			--fill: var(--active-color, #{$icon-color});
		}
	}

	// Disabled State
	&.disabled,
	&.loading {
		opacity: 0.5;
		cursor: default;
		pointer-events: none;
	}

	// Like disabled but without the opacity change
	&.no-action {
		cursor: default;
		pointer-events: none;
	}

	// Make right icon animated
	&.splashy {
		&:hover {
			#right-icon {
				opacity: 1;
				transform: translate(0, 0);
			}
		}

		#right-icon {
			opacity: 0;

			transform: translate(-5px, 0);
			transition:
				opacity consts.$transition-length,
				transform consts.$transition-length;
		}
	}

	&.dashed-border-button {
		$border-width: 3px;
		$border-radius: 10px;

		overflow: hidden;
		display: flex;
		position: relative;
		padding: $border-width;
		border-radius: $border-radius;

		background-image: utils.dashed-border(
			rgba(255, 255, 255, 0.12),
			$border-radius,
			$border-width,
			$dash-array: (5, 11),
			$dash-offset: 2px
		);

		&:hover {
			background-image: utils.dashed-border(
				rgba(255, 255, 255, 0.15),
				$border-radius,
				$border-width,
				$dash-array: (5, 11),
				$dash-offset: 2px
			);
		}
	}
}

.stylized-button {
	&.small {
		@include stylized-button(22px, 2px 14px, 2px, 11px); // Might want to fix later
	}

	&.medium {
		@include stylized-button(consts.$button-height, 7px 18px, 4px, 14px);
	}

	&.large {
		@include stylized-button(consts.$button-height-large, 0 22px, 5px, 15px);
	}
}
